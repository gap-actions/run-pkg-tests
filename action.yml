name: 'Run package tests'
description: 'Run package tests'
inputs:
  NO_COVERAGE:
    description: 'set to a non-empty string to suppress gathering coverage'
    required: false
    default: ''
  GAP_TESTFILE:
    description: 'The name of the GAP file to be read for executing the package tests'
    required: false
    default: 'tst/testall.g'
env:
  CHERE_INVOKING: 1

runs:
  using: "composite"
  steps:
      - name: "Run tests"
        run: |
         set -ex

         GAPROOT=${GAPROOT-$HOME/gap}

         # set up a custom GAP root containing only this package, so that
         # we can force GAP to load the correct version of this package
         # (we already did that in build_pkg.sh, but we do it again here,
         # to allow the occasional instance where a package wants to also
         # run the tests of others packages, by invoking this script multiple
         # times in different directories)
         mkdir -p /tmp/gaproot/pkg/
         ln -f -s $PWD /tmp/gaproot/pkg/

         # start GAP with custom GAP root, to ensure correct package version is loaded
         GAP="$GAPROOT/bin/gap.sh -l /tmp/gaproot; --quitonbreak"

         # Unless explicitly turned off by setting the NO_COVERAGE environment variable,
         # we collect coverage data
         if [[ -z $NO_COVERAGE ]]; then
             mkdir -p ${COVDIR-coverage}
             GAP="$GAP --cover ${COVDIR-coverage}/$(mktemp XXXXXX).coverage"
         fi

         cat > __TEST_RUNNNER__.g <<EOF

         GAP_TESTFILE:="";
         Read("PackageInfo.g");
         info := GAPInfo.PackageInfoCurrent;
         if IsEmpty(GAP_TESTFILE) or not IsExistingFile(GAP_TESTFILE) then
             GAP_TESTFILE := info.TestFile;
         fi;
         if EndsWith(GAP_TESTFILE, ".tst") then
             SetPackagePath(info.PackageName, "$PWD");
             LoadPackage(info.PackageName);
             QUIT_GAP(Test(GAP_TESTFILE, rec(compareFunction := "uptowhitespace")));
         else
             Read(GAP_TESTFILE);
             Error("Package TestFile did not exit gap");
         fi;
         EOF
         $GAP __TEST_RUNNNER__.g

        env:
          NO_COVERAGE: ${{ inputs.NO_COVERAGE }}
          GAP_TESTFILE: ${{ inputs.GAP_TESTFILE }}
        shell: bash
