name: 'Run package tests'
description: 'Run package tests'
inputs:
  NO_COVERAGE:
    description: 'set to a non-empty string to suppress gathering coverage'
    required: false
    type: string
    default: ''
  GAP_TESTFILE:
    description: 'Name of the GAP file to be read for executing the package tests (overrides TestFile in PackageInfo.g)'
    required: false
    type: string
    default: ''
  only-needed:
    description: 'If set to true then only needed dependencies of the package being tested are loaded'
    required: false
    type: boolean
    default: false
  load-all:
    description: 'If set to true then execute LoadAllPackages() before the package being tested'
    required: false
    type: boolean
    default: false
  warnings-as-errors:
    description: 'If set to true then any errors produced whilst loading the package will be treated as errors'
    required: false
    type: boolean
    default: true
  pre-gap:
    description: 'Prefix for the ''GAP'' shell variable used by this action to launch GAP (e.g. setting this to ''valgrind --trace-children=yes --leak-check=full'' will run GAP through valgrind)'
    required: false
    type: string
    default: ''
env:
  CHERE_INVOKING: 1

runs:
  using: "composite"
  steps:
      - name: "Run tests"
        run: |
         set -ex

         GAPROOT=${GAPROOT-$HOME/gap}

         # set up a custom GAP root containing only this package, so that
         # we can force GAP to load the correct version of this package
         # (we already did that in build_pkg.sh, but we do it again here,
         # to allow the occasional instance where a package wants to also
         # run the tests of others packages, by invoking this script multiple
         # times in different directories)
         mkdir -p /tmp/gaproot/pkg/
         ln -f -s $PWD /tmp/gaproot/pkg/

         # start GAP with custom GAP root, to ensure correct package version is loaded
         GAP="$GAPROOT/gap -l /tmp/gaproot; --quitonbreak"

         # Prepend pre-gap prefix, if it exists
         if [[ ! -z "${{ inputs.pre-gap }}" ]]; then
             GAP="${{ inputs.pre-gap }} $GAP"
         fi

         if "${{ inputs.only-needed }}" = "true" ; then
           GAP="$GAP -A"
         fi

         # Unless explicitly turned off by setting the NO_COVERAGE environment variable,
         # we collect coverage data
         if [[ -z "${{ inputs.NO_COVERAGE }}" ]]; then
             mkdir -p ${COVDIR-coverage}
             GAP="$GAP --cover ${COVDIR-coverage}/$(mktemp XXXXXX).coverage"
         fi

         cat > __TEST_RUNNNER__.g <<EOF

         GAP_TESTFILE:="${{ inputs.GAP_TESTFILE }}";
         Read("PackageInfo.g");
         info := GAPInfo.PackageInfoCurrent;
         if IsEmpty(GAP_TESTFILE) or not IsExistingFile(GAP_TESTFILE) then
             GAP_TESTFILE := info.TestFile;
         fi;

         SetInfoLevel(InfoPackageLoading, PACKAGE_DEBUG);
         SetPackagePath(info.PackageName, "/tmp/gaproot/pkg/$(basename $PWD)");

         # Capture the output of loading
         output := "";
         output_stream := OutputTextString(output, true);
         SetPrintFormattingStatus(output_stream, false);
         OutputLogTo(output_stream);

         # Load the package with debug info
         if ${{ inputs.only-needed }} = true then
            LoadPackage(info.PackageName : OnlyNeeded);
         else
            LoadPackage(info.PackageName);
         fi;
         if ${{ inputs.load-all }} = true then
            LoadAllPackages();
         fi;

         OutputLogTo();
         CloseStream(output_stream);

         # Treat warnings as errors if specified
         if ${{ inputs.warnings-as-errors }} = true then
            if PositionSublist(output, "warning") <> fail then
                Error("Warnings were found when loading the package");
            fi;
         fi;

         SetInfoLevel(InfoPackageLoading, PACKAGE_ERROR);
         Print("Now running tests from ", GAP_TESTFILE, "\n");
         if EndsWith(GAP_TESTFILE, ".tst") then
             QUIT_GAP(Test(GAP_TESTFILE, rec(compareFunction := "uptowhitespace")));
         else
             Read(GAP_TESTFILE);
             Error("Package TestFile did not exit gap");
         fi;
         EOF
         $GAP __TEST_RUNNNER__.g

        shell: bash
